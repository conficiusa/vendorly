// This is your Prisma schema file for Vendorly platform

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

model User {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  phone            String? // Made it optional with String type
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  emailVerified    Boolean
  image            String?
  role             UserRole    @default(CUSTOMER) // Role-based access
  sessions         Session[]
  accounts         Account[]
  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]
  first_name       String
  last_name        String

  store  Store? // Optional link to a store if the user is a vendor
  Review Review[]

  phoneNumber         String?
  phoneNumberVerified Boolean?

  address Address? // One-to-one relation with Address

  @@map("user")
  @@unique([phoneNumber])
}

model Address {
  id              String   @id @default(uuid())
  region          String
  city            String
  address_line1   String
  address_line2   String?
  digital_address String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations to User and Store
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Store {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  bio       String?
  images    String[] // Array of store image URLs
  userId    String    @unique // Each vendor has one store
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[]
  services  Service[]
  createdAt DateTime  @default(now())
  Review    Review[]
  address   Address?  // One-to-one relation with Address

  @@map("store")
}

model Product {
  id              String            @id @default(uuid())
  name            String
  description     String?
  price           Float
  stock           Int
  storeId         String
  store           Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variants        ProductVariant[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Review          Review[]
  Category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      String?
  ProductCategory ProductCategory[]

  @@map("product")
}

model Service {
  id              String            @id @default(uuid())
  name            String
  description     String?
  price           Float
  storeId         String
  store           Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Review          Review[]
  Category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      String?
  ServiceCategory ServiceCategory[]

  @@map("service")
}

model ProductVariant {
  id             String                 @id @default(uuid())
  productId      String
  product        Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantOptions ProductVariantOption[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@map("product_variant")
}

model ProductVariantOption {
  id        String         @id @default(uuid())
  name      String // e.g., "Color", "Size"
  value     String // e.g., "Yellow", "M"
  stock     Int // Stock for this specific combination
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("product_variant_option")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int // Rating from 1 to 5
  comment   String?
  productId String?
  serviceId String?
  storeId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Category {
  id              String            @id @default(uuid())
  name            String
  slug            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  products        Product[]
  services        Service[]
  ProductCategory ProductCategory[]
  ServiceCategory ServiceCategory[]

  @@map("category")
}

model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("product_category")
}

model ServiceCategory {
  id         String   @id @default(uuid())
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("service_category")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}
