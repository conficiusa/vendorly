// This is your Prisma schema file for Vendorly platform

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

model User {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  onboarded        Boolean     @default(false) 
  phone            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  emailVerified    Boolean
  image            String?
  role             UserRole    @default(CUSTOMER)
  sessions         Session[]
  accounts         Account[]
  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]
  first_name       String
  last_name        String
  store            Store?
  Review           Review[]
  phoneNumber         String?
  phoneNumberVerified Boolean?
  address             Address?

  @@map("user")
  @@unique([phoneNumber])
}

model Address {
  id              String   @id @default(cuid())
  address_line1   String
  address_line2   String?
  city            String
  region          String
  digital_address String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?  @unique
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId         String?  @unique
  store           Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Store {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  bio       String?
  logo      String?
  images    String[]
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[]
  services  Service[]
  createdAt DateTime  @default(now())
  Review    Review[]
  address   Address?

  @@map("store")
}

model Product {
  id                String                @id @default(uuid())
  name              String
  slug              String                @unique
  images            String[]
  description       String?
  price             Float
  stock             Int
  storeId           String
  store             Store                 @relation(fields: [storeId], references: [id], onDelete: Cascade)
  faults            String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  Review            Review[]
  Category          Category?             @relation(fields: [categoryId], references: [id])
  categoryId        String?
  ProductCategory   ProductCategory[]
  variantOptions    ProductVariantOption[]

  @@map("product")
}

model Service {
  id              String            @id @default(uuid())
  slug            String            @unique
  name            String
  description     String?
  rate            Float
  unit            String
  storeId         String
  store           Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Review          Review[]
  images          String[]          @default([])
  Category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      String?
  ServiceCategory ServiceCategory[]
  workingDays     Json              
  dailyMax        Int               
  serviceDuration Int              
  operatingHours  Json              
  isActive        Boolean           @default(true)

  @@map("service")
}

model ProductVariantOption {
  id         String   @id @default(uuid())
  productId  String
  attributes Json     // e.g., { "Size": "M", "Color": "Red" }
  stock      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variant_option")
}

model VariantAttribute {
  id                String              @id @default(uuid())
  name              String              @unique
  values            String[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categories        CategoryVariantAttribute[]

  @@map("variant_attribute")
}

model CategoryVariantAttribute {
  id                String   @id @default(uuid())
  categoryId        String
  variantAttributeId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category          Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variantAttribute  VariantAttribute @relation(fields: [variantAttributeId], references: [id], onDelete: Cascade)

  @@unique([categoryId, variantAttributeId])
  @@map("category_variant_attribute")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  productId String?
  serviceId String?
  storeId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

enum CategoryType { 
  PRODUCT
  SERVICE
}

model Category {
  id                String              @id @default(uuid())
  name              String
  type              CategoryType        @default(PRODUCT)
  slug              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  products          Product[]
  services          Service[]
  ProductCategory   ProductCategory[]
  ServiceCategory   ServiceCategory[]
  variantAttributes CategoryVariantAttribute[]

  @@map("category")
}

model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("product_category")
}

model ServiceCategory {
  id         String   @id @default(uuid())
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("service_category")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}
