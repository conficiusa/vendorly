// This is your Prisma schema file for Vendorly platform

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User/Auth Models
model User {
  id                  String         @id @default(uuid())
  name                String
  email               String         @unique
  phone               String?
  image               String?
  gender              GENDERTYPE?
  role                UserRole       @default(CUSTOMER)
  emailVerified       Boolean
  first_name          String?
  last_name           String?
  store               Store?
  Review              Review[]
  addresses           Address[]
  cart                Cart?
  Order               Order[]
  accounts            Account[]
  sessions            Session[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@map("user")
}

model Address {
  id              String   @id @default(cuid())
  address_line1   String
  address_line2   String?
  city            String
  region          String
  digital_address String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId         String?  @unique
  store           Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  Order           Order[]

  @@map("address")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Store & Inventory Models
model Store {
  id        String      @id @default(uuid())
  name      String
  slug      String      @unique
  bio       String?
  logo      String?
  images    String[]
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[]
  services  Service[]
  createdAt DateTime    @default(now())
  Review    Review[]
  address   Address?
  OrderItem OrderItem[]

  @@map("store")
}

model Product {
  id              String                 @id @default(uuid())
  name            String
  slug            String                 @unique
  images          String[]
  description     String?
  price           Float
  discount        Float?
  discountType    DiscountType?
  stock           Int
  storeId         String
  rating          Float?
  store           Store                  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  faults          String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  Review          Review[]
  Category        Category?              @relation(fields: [categoryId], references: [id])
  categoryId      String?
  ProductCategory ProductCategory[]
  variantOptions  ProductVariantOption[]
  cartItems       CartItem[]
  OrderItem       OrderItem[]

  @@map("product")
}

model Service {
  id              String            @id @default(uuid())
  slug            String            @unique
  name            String
  description     String?
  rate            Float
  unit            String
  storeId         String
  store           Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Review          Review[]
  images          String[]          @default([])
  Category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      String?
  ServiceCategory ServiceCategory[]
  workingDays     Json
  dailyMax        Int
  serviceDuration Int
  operatingHours  Json
  isActive        Boolean           @default(true)

  @@map("service")
}

model ProductVariantOption {
  id         String   @id @default(uuid())
  productId  String
  attributes Json // e.g., { "Size": "M", "Color": "Red" }
  stock      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  OrderItem OrderItem[]

  @@map("product_variant_option")
}

model VariantAttribute {
  id         String                     @id @default(uuid())
  name       String                     @unique
  values     String[]
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  categories CategoryVariantAttribute[]

  @@map("variant_attribute")
}

// Categorization Models
model Category {
  id                String                     @id @default(uuid())
  name              String
  type              CategoryType               @default(PRODUCT)
  slug              String                     @unique
  /*
   * Hierarchical fields: a category can have a parent, and any number of children.
   * "parentId" is nullable for root categories.
   */
  parentId         String?
  parent           Category?                  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children         Category[]                 @relation("CategoryHierarchy")
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  products          Product[]
  services          Service[]
  ProductCategory   ProductCategory[]
  ServiceCategory   ServiceCategory[]
  variantAttributes CategoryVariantAttribute[]

  @@index([parentId])
  @@map("category")
}

model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("product_category")
}

model ServiceCategory {
  id         String   @id @default(uuid())
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("service_category")
}

model CategoryVariantAttribute {
  id                 String   @id @default(uuid())
  categoryId         String
  variantAttributeId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  category         Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variantAttribute VariantAttribute @relation(fields: [variantAttributeId], references: [id], onDelete: Cascade)

  @@unique([categoryId, variantAttributeId])
  @@map("category_variant_attribute")
}

// Order & Cart Models
model Cart {
  id        String     @id @default(uuid())
  userId    String? // Null for guest carts
  sessionId String? // For guest cart identification
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId]) // Each authenticated user can only have one cart
  @@unique([sessionId]) // Each guest session can only have one cart
  @@map("cart")
}

model CartItem {
  id                     String   @id @default(uuid())
  cartId                 String
  productId              String
  productVariantOptionId String? // Null for non-variant products
  image                  String?
  quantity               Int      @default(1)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  cart                 Cart                  @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product              Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantOption ProductVariantOption? @relation(fields: [productVariantOptionId], references: [id], onDelete: Cascade)

  // Ensure unique combination of cart, product, and variant option
  @@unique([cartId, productId, productVariantOptionId])
  @@map("cart_item")
}

model Order {
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  total        Float
  deliveryFee  Float          @default(0)
  subtotal     Float
  orderItems   OrderItem[]
  address      Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transaction  Transaction[]

  @@map("order")
}

model OrderItem {
  id                     String                @id @default(uuid())
  orderId                String?
  order                  Order?                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId              String
  product                Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantOptionId String?
  productVariantOption   ProductVariantOption? @relation(fields: [productVariantOptionId], references: [id], onDelete: Cascade)
  quantity               Int
  price                  Float
  total                  Float
  storeId                String
  store                  Store                 @relation(fields: [storeId], references: [id], onDelete: Cascade)
  status                 OrderStatus           @default(PENDING)

  @@map("order_item")
}
// Transaction & Payment Models
model Transaction {
  id                  String               @id @default(uuid())
  reference           String               @unique
  mobileMoneyProvider MobileMoneyProvider?
  receiptId           String?
  amount              Float
  paymentMethod       PaymentMethod
  status              TransactionStatus    @default(PENDING)
  orderId             String
  order               Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

// Review Model
model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  productId String?
  serviceId String?
  storeId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

// Utility/Misc Models
model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}

// Enums
enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum PaymentMethod {
  CASH
  DEBIT_CARD
  MOBILE_MONEY
}

enum MobileMoneyProvider {
  MTN
  TELECEL
  AIRTELTIGO
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum CategoryType {
  PRODUCT
  SERVICE
}

enum GENDERTYPE {
  MALE
  FEMALE
}

enum DiscountType {
  PERCENTAGE
  FIXED
}